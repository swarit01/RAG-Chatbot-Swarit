package com.prophet;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;

import java.io.IOException;

/**
 * @author Swarit Joshipura
 *
 * This class contains the business logic to generate embeddings, given a string prompt.
 */
public class OpenAIEmbeddingsHelper {
    private static final String OPENAI_API_KEY= "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";
    private static final String OPENAI_API_URL = "https://api.openai.com/v1/embeddings";

    /**
     * Generates an embedding for a given text using the OpenAI API's text embedding model. This method constructs a JSON
     * payload with the specified text and the model identifier, then sends a POST request to the OpenAI API. The method
     * utilizes the "text-embedding-ada-002" model for generating embeddings, which are numerical representations of the input text.
     *
     * @param text The text string for which to generate an embedding. The text should be a non-null, non-empty string.
     * @return A JsonNode object that contains the embedding array generated by the OpenAI API. If the request is successful,
     *         this will be a non-null JsonNode containing the embedding. If the request fails or if there's an issue with
     *         the rate limit or other API constraints, the method will return null and print an error message to the console.
     * @throws IOException If there's an error in sending the request to the OpenAI API or in processing the response. This
     *         could be due to network issues, issues with forming the request, or problems encountered while reading the
     *         response body.
     *
     * The method assumes that the OPENAI_API_URL and OPENAI_API_KEY variables are properly set to the OpenAI API's URL and
     * your OpenAI API key, respectively. Ensure these variables are correctly initialized before calling this method.
     *
     * Usage example:
     * To generate an embedding for a piece of text, simply call this method with the desired text as the argument. Ensure
     * that your application is equipped to handle the null return scenario, which indicates a failure in the embedding
     * generation process:
     *
     * JsonNode embedding = generateEmbedding("Your text here");
     *
     * Note: The actual structure of the returned JsonNode containing the embedding may vary based on the OpenAI API's
     * response structure. It is recommended to consult the OpenAI API documentation for the latest response formats.
     */

    public static JsonNode generateEmbedding(String text) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        String textToEmbed = "{\n" +
                "    \"input\": \"" + text + "\",\n" +
                "    \"model\": \"text-embedding-ada-002\"\n" +
                "  }";

        RequestBody body = RequestBody.create(MediaType.parse("application/json"), textToEmbed);
        Request request = new Request.Builder()
                .url(OPENAI_API_URL)
                .addHeader("Authorization", "Bearer " + OPENAI_API_KEY)
                .post(body)
                .build();
        OkHttpClient client = new OkHttpClient();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful()) {
                String responseBody = response.body().string();
                JsonNode openAIJson = mapper.readTree(responseBody);
                JsonNode embeddingArray = openAIJson.get("data").get(0).get("embedding");
                return embeddingArray;
            } else {
                System.out.println("Please ensure the OpenAI rate limit has not been hit!" + response.message());
                return null;
            }
        }
    }
}
